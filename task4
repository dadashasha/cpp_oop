#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <tuple>

template <typename... Types>
class CsvParser {
public:
    CsvParser(std::ifstream& file, size_t skipLines = 0)
        : file_(file), skipLines_(skipLines), currentLine_(0) {}

    class CsvIterator {
    public:
        CsvIterator(std::ifstream& file, size_t skipLines)
            : file_(file), skipLines_(skipLines) {
            skipHeader();
        }

        bool operator!=(const CsvIterator& other) const {
            return !file_.eof();
        }

        const std::tuple<Types...>& operator*() const {
            return currentRow_;
        }

        CsvIterator& operator++() {
            readNextRow();
            return *this;
        }

    private:
        std::ifstream& file_;
        size_t skipLines_;
        std::tuple<Types...> currentRow_;

        void skipHeader() {
            std::string line;
            if (skipLines_ == -1) {

            }
            else {
                for (size_t i = 0; i <= skipLines_; ++i) {
                    std::getline(file_, line);
                    if (!file_.eof()) {
                        std::stringstream ss(line);
                        readRow(ss, std::index_sequence_for<Types...>());
                    }
                }
            }
        }

        void readNextRow() {
            std::string line;
            if (std::getline(file_, line)) {
                std::stringstream ss(line);
                readRow(ss, std::index_sequence_for<Types...>());
            }
        }

        template <size_t... Indices>
        void readRow(std::istream& stream, std::index_sequence<Indices...>) {
            (void)std::initializer_list<int>{((readCell(std::get<Indices>(currentRow_), stream)), 0)...};
        }

        template <typename T>
        void readCell(T& cell, std::istream& stream) {
            std::string cellStr;
            if (std::getline(stream, cellStr, ',')) {
                std::stringstream cellStream(cellStr);
                cellStream >> cell;
            }
        }
    };

    CsvIterator begin() {
        return CsvIterator(file_, skipLines_);
    }

    CsvIterator end() {
        return CsvIterator(file_, -1);
    }

private:
    std::ifstream& file_;
    size_t skipLines_;
    size_t currentLine_;
};

template <size_t Index, typename... Types>
typename std::enable_if<Index == sizeof...(Types)>::type
printTuple(std::ostream&, const std::tuple<Types...>&) {}

template <size_t Index, typename... Types>
typename std::enable_if < Index < sizeof...(Types)>::type
    printTuple(std::ostream& os, const std::tuple<Types...>& t) {
    if (Index != 0)
        os << ", ";
    os << std::get<Index>(t);
    printTuple<Index + 1>(os, t);
}

template <typename... Types>
std::ostream& operator<<(std::ostream& os, const std::tuple<Types...>& t) {
    printTuple<0>(os, t);
    return os;
}

int main() {
    std::ifstream csvFile("test.csv");

    if (!csvFile.is_open()) {
        std::cerr << "Unable to open file" << std::endl;
        return 1;
    }
    CsvParser<std::string, int, double> csvParser(csvFile, 1);

    for (const std::tuple<std::string, int, double>& row : csvParser) {
        std::cout << row << "\n";
    }

    return 0;
}
